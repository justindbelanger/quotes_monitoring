; -*- mode: clojure; -*-
; vim: filetype=clojure

;; Configure interfaces and ports for Riemann to send and receive events.
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

;; Log to a file.
(logging/init {:file "/var/log/riemann.log"})

;; Periodically expire events to indicate a service has gone down.
(let [expiry-s 15]
  (periodically-expire expiry-s))

;; * Simple configuration.
#_(streams
  prn
  (index))

;; * Complex configuration.

(def log-info #(info (pr-str %)))
(def log-error #(error (pr-str %)))

(def in-error-state? #(contains? #{"critical" "expired" "error"}
                                 (:state %)))

(let [my-index (index)
      ttl-s    30]
  (streams
   ;; Crabby's monitoring events override time-to-live, which is wrong.
   ;; So, we fix that attribute here.
   (smap #(assoc %
                 :in-error-state (in-error-state? %)
                 :ttl ttl-s)
         ;; Now we can index the incoming event(s).
         my-index

         ;; Write all events to the log file.
         (where* :in-error-state
                 log-error
                 (else
                  log-info)))))
